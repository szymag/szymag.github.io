<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GSoC Report</title>
    <link>https://szymag.github.io/</link>
    <description>Recent content on GSoC Report</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-uk</language>
    <lastBuildDate>Wed, 23 Aug 2017 20:41:21 +0100</lastBuildDate>
    
	<atom:link href="https://szymag.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Week 11</title>
      <link>https://szymag.github.io/post/week-11/</link>
      <pubDate>Wed, 23 Aug 2017 20:41:21 +0100</pubDate>
      
      <guid>https://szymag.github.io/post/week-11/</guid>
      <description>During week 11 I extended differential operator to handle mixed coordinate system.
Mixed means that scalar or vector which we&amp;rsquo;re using as argument has elements coming from several different coordinate systems. Not necessarily connected. These work were split into three PR&amp;rsquo;s, one for every differential operator, gradient#13118 , divergence#13128 and curl#13154.
To implement this, we need to only take care about product rule for scalar and vector, but they are well defined.</description>
    </item>
    
    <item>
      <title>Week 10</title>
      <link>https://szymag.github.io/post/week-10/</link>
      <pubDate>Thu, 10 Aug 2017 20:41:21 +0100</pubDate>
      
      <guid>https://szymag.github.io/post/week-10/</guid>
      <description>During week 10 with my mentor, we finished creation of new CoordSys3D constructor. We can set now transformation while coordinate system is created. We&amp;rsquo;ve moved functionality from _connect_to_standard_cartesian to constructor so we support the same type of transformation as previously.
Now I demonstrate shorty how coordinate system different that Caertsian can be created in SymPy:
a = CoordSys3D(&#39;a&#39;, transformation=&#39;spherical&#39;, variable_names=[&#34;r&#34;, &#34;theta&#34;, &#34;phi&#34;]) a.lame_coefficients() a.transformation_to_parent() b = CoordSys3D(&#39;b&#39;, lambda r, theta, phi: (r*sin(theta)*cos(phi), r*sin(theta)*sin(phi), r*cos(theta)), variable_names=[&#34;</description>
    </item>
    
    <item>
      <title>Week 9</title>
      <link>https://szymag.github.io/post/week-9/</link>
      <pubDate>Wed, 02 Aug 2017 20:41:21 +0100</pubDate>
      
      <guid>https://szymag.github.io/post/week-9/</guid>
      <description>Reconstruction of constructor in CoordSys3D is like never ending story, but fortunately we are almost at the end of the work. We decide to distinguish two cases. When rotation matrix or location is set and when transformation is set. In the first case we are creating transformation equations from rotation matrix and translation vector. In the second, user is responsible for defining transformation equations but it is also possible to use some pre-defined curvilinear coordinate system.</description>
    </item>
    
    <item>
      <title>Week 8</title>
      <link>https://szymag.github.io/post/week-8/</link>
      <pubDate>Tue, 25 Jul 2017 20:41:21 +0100</pubDate>
      
      <guid>https://szymag.github.io/post/week-8/</guid>
      <description>During week 8 I added several methods which calculate transformation equations for some specific situation. We&amp;rsquo;ve finished step, where transformation equations are obtained for rotation, translation, and changing the type of coordinate system. This all transitions are handled in vector module. We&amp;rsquo;ve also prepared the method for composition of any two kind of transformations, because coordinate system can be rotated and translated at the same time.
My current task is to use already added methods in CoordSys3D constructor.</description>
    </item>
    
    <item>
      <title>Week 7</title>
      <link>https://szymag.github.io/post/week-7/</link>
      <pubDate>Tue, 18 Jul 2017 20:41:21 +0100</pubDate>
      
      <guid>https://szymag.github.io/post/week-7/</guid>
      <description>During week 7 I continued my work on transformation equations for rotation. One PR #12960 which obtains transformation equations from rotation matrix was merged. I have prepared also method for composition of transformation equation but I didn&amp;rsquo;t push them. I need to still think how to arrange the whole structure. My mentor suggest that we can just use transformation equations instead of rotation matrix, because it&amp;rsquo;s just general concept. After that we could modify constructor in CoordSys3D class and put them transformation equation instead of rotation matrix.</description>
    </item>
    
    <item>
      <title>Week 6</title>
      <link>https://szymag.github.io/post/week-6/</link>
      <pubDate>Tue, 11 Jul 2017 20:41:21 +0100</pubDate>
      
      <guid>https://szymag.github.io/post/week-6/</guid>
      <description>In the last week I didn&amp;rsquo;t create any PR which is worth to mention so in this report I&amp;rsquo;d like to introduce the concept which we&amp;rsquo;re going to add vector module.
Currently, in SymPy we have transformation equations but they&amp;rsquo;re responsible only for rotation and translation. We have already implemented the transformation equations for changing type of coordinate system so we need to somehow deals with composition of this two kind of transformation.</description>
    </item>
    
    <item>
      <title>Week 5</title>
      <link>https://szymag.github.io/post/week-5/</link>
      <pubDate>Tue, 04 Jul 2017 23:41:21 +0100</pubDate>
      
      <guid>https://szymag.github.io/post/week-5/</guid>
      <description>This posts contains summary of two weeks work.
I was working on introducing transformation equations in CoordSysCartesian. We decide, up to now, to connect every other curvilinear coordinate system to Cartesian, so equations maps the rectangular one to the desired one. We allow user to set new coordinate system in three possible way:
a = CoordSys3D(&#39;a&#39;) a.connect_to_cartesian(&#39;spherical&#39;) a.connect_to_cartesian((a.x, a.y, a.z)) x, y, z = Symbols(&#39;x y z&#39;) a.connect_to_cartesian((x, y, z), (x, y, z)) So we can set coordinate system by str from pre-defined dict.</description>
    </item>
    
    <item>
      <title>Week 3</title>
      <link>https://szymag.github.io/post/week-3/</link>
      <pubDate>Tue, 20 Jun 2017 23:41:21 +0100</pubDate>
      
      <guid>https://szymag.github.io/post/week-3/</guid>
      <description>In the last week I focused mainly on finishing tasks related Lame coefficients. During this time two PR were merged. In my previous post I described how we can calculate gradient, curl and divergence in different type of coordinate system, so now I described only new thing which was already add to mainline. We decided to remove dependency between Del class and CoordSysCartesian. From mathematical point of view it makes sense, because nabla operator is just an entity which acts on vector or scalar and his behavior is independent from coordinate system.</description>
    </item>
    
    <item>
      <title>Week 2</title>
      <link>https://szymag.github.io/post/week-2/</link>
      <pubDate>Tue, 13 Jun 2017 19:41:21 +0100</pubDate>
      
      <guid>https://szymag.github.io/post/week-2/</guid>
      <description>My second week I spent on introducing Lame coefficients into CoordSysCartesian. Unfortunately, our work is restricted by SymPy structure so, we don&amp;rsquo;t have too much freedom in our implementation. Hopefully, with my mentor, Francesco, we found some solution how to achieve our goals without destroying vector module. This week shows that I have lack in my knowledge about object-oriented programming and SymPy.
Having access to Lame coefficient I was able to modified Del operator (in mathematics nabla operators) to handle spherical and cylindrical coordinate system.</description>
    </item>
    
    <item>
      <title>Week 1</title>
      <link>https://szymag.github.io/post/week-1/</link>
      <pubDate>Fri, 02 Jun 2017 23:41:21 +0100</pubDate>
      
      <guid>https://szymag.github.io/post/week-1/</guid>
      <description>My first task, which corresponds to GSoC was create three classes, Curl, Divergence, Gradient. They create object which are unevaluated mathematical expression. Sometimes it&amp;rsquo;s better working on such expression, for example when we wants to check some identity. We have to check if it&amp;rsquo;s true for every possible vector. We have still some work here, because in next step we want to create abstract vector expression. There is one open PR corresponding to described task:</description>
    </item>
    
    <item>
      <title>Week -2/Week -1</title>
      <link>https://szymag.github.io/post/week--2/</link>
      <pubDate>Tue, 16 May 2017 23:41:21 +0100</pubDate>
      
      <guid>https://szymag.github.io/post/week--2/</guid>
      <description>The end of may is quite busy for me. I have to finish some projects on my University before the end of month, to be sure that I will able to spend enough time on GSoC. Everything is on track, so there&amp;rsquo;s no reason to worry.
At the weekend I&amp;rsquo;m going to spend time on looking into SymPy, especially into diffgeom module. I would like to find some idea, witch could be use in my project.</description>
    </item>
    
  </channel>
</rss>